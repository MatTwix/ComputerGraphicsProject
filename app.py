import streamlit as st
from pathlib import Path
from PIL import Image
import csv
import uuid
import shutil
from process import (
    processImageFile,
    DEFAULT_DPI,
    DEFAULT_THRESHOLD,
    DEFAULT_OUTPUT_FROMAT,
    DEFAULT_JPEG_QUALITY,
    A4_IN,
)

st.set_page_config(page_title="A4 Print Prep", layout="wide")
st.title("A4 Print Prep")

with st.expander("üìù –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"):
    st.markdown("""
    **A4 Print Prep** - –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ –ø–µ—á–∞—Ç–∏ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–µ A4.
    
    **–ü—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏:**
    
    - **DPI (Dots Per Inch)**: {0} - –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–µ—á–∞—Ç–∏
    - **–¶–≤–µ—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å**: CMYK - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª—è –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –ø–µ—á–∞—Ç–∏
    - **–ö–∞—á–µ—Å—Ç–≤–æ JPEG**: {1}% - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Å–∂–∞—Ç–∏–µ–º
    - **–°–∂–∞—Ç–∏–µ TIFF**: LZW - –±–µ—Å–ø–æ—Ç–µ—Ä—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
    - **–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ**: –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    - **–ü–æ–ª—è**: –ë–µ–ª—ã–µ –ø–æ–ª—è –≤–æ–∫—Ä—É–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    - **–§–æ—Ä–º–∞—Ç**: A4 ({2:.2f}√ó{3:.2f} –¥—é–π–º–æ–≤)
    
    **–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞**: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–æ–ª—å—à–µ {4} –æ—Ç–±—Ä–∞–∫–æ–≤—ã–≤–∞—é—Ç—Å—è
    """.format(DEFAULT_DPI, DEFAULT_JPEG_QUALITY, A4_IN[0], A4_IN[1], DEFAULT_THRESHOLD))

out_dir = Path("output")
out_dir.mkdir(exist_ok=True)

if "preview_images" not in st.session_state:
    st.session_state.preview_images = []  # —Å–ø–∏—Å–æ–∫ (tmp_path, –∏–º—è —Ñ–∞–π–ª–∞)
if "processed_images" not in st.session_state:
    st.session_state.processed_images = []  # —Å–ø–∏—Å–æ–∫ (outPath, –∏–º—è —Ñ–∞–π–ª–∞)

uploaded_files = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    type=["jpg", "jpeg", "png", "tif", "tiff", "bmp"],
    accept_multiple_files=True,
)

if uploaded_files:
    existing_files = {fname for _, fname in st.session_state.preview_images}
    
    for f in uploaded_files:
        if f.name not in existing_files:
            tmp_path = out_dir / f"{uuid.uuid4()}_{f.name}"
            with open(tmp_path, "wb") as buf:
                buf.write(f.read())
            st.session_state.preview_images.append((tmp_path, f.name))

col1, col2, col3 = st.columns(3)
with col1:
    orientation = st.selectbox("–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è", ["portrait", "landscape", "reverse"])
with col2:
    placement = st.selectbox("–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ", ["center", "top", "bottom", "left", "right"])
with col3:
    out_format = st.selectbox("–§–æ—Ä–º–∞—Ç", ["TIFF", "JPEG"])

threshold = st.slider("–ü–æ—Ä–æ–≥ –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∏", 1.0, 10.0, DEFAULT_THRESHOLD, 0.1)
border_color = st.color_picker("–¶–≤–µ—Ç –ø–æ–ª–µ–π", "#FFFFFF")
borderRGB = tuple(int(border_color.lstrip("#")[i : i + 2], 16) for i in (0, 2, 4))

if st.session_state.preview_images:
    col_header, col_count, col_clear = st.columns([2, 1, 1])
    with col_header:
        st.subheader("–ü—Ä–µ–≤—å—é –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    with col_count:
        st.metric("–§–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", len(st.session_state.preview_images))
    with col_clear:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
            for p, _ in st.session_state.preview_images:
                if p.exists():
                    p.unlink()
            st.session_state.preview_images = []
            st.session_state.processed_images = []
            st.rerun()
    for tmp_path, fname in st.session_state.preview_images:
        try:
            im = Image.open(tmp_path)
            im.thumbnail((200, 200))  # —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é
            st.image(im, caption=fname, width=200)
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é {fname}: {e}")

if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É") and st.session_state.preview_images:
    reportRows = []
    progress = st.progress(0)
    total = len(st.session_state.preview_images)

    st.session_state.processed_images = []  # –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ

    for i, (tmp_path, fname) in enumerate(st.session_state.preview_images, start=1):
        res = processImageFile(
            tmp_path,
            out_dir,
            dpi=DEFAULT_DPI,
            threshold=threshold,
            placement=placement,
            borderRGB=borderRGB,
            outFormat=out_format,
            jpegQuality=DEFAULT_JPEG_QUALITY,
            orientation=orientation,
        )

        col_a, col_b = st.columns(2)
        with col_a:
            try:
                im_before = Image.open(tmp_path)
                im_before.thumbnail((250, 250))
                st.image(im_before, caption=f"–î–æ: {fname}", width=250)
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ {fname}: {e}")

        if res["status"] == "converted":
            with col_b:
                try:
                    im_after = Image.open(res["outPath"])
                    im_after.thumbnail((400, 400))  # –±–æ–ª—å—à–µ–µ –ø—Ä–µ–≤—å—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    st.image(im_after, caption="–ü–æ—Å–ª–µ", width=400)
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ {fname}: {e}")

            st.session_state.processed_images.append((res["outPath"], fname))
            
            with st.expander(f"üìä –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {fname}"):
                col_info1, col_info2 = st.columns(2)
                
                with col_info1:
                    st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:**")
                    st.write(f"- DPI: {DEFAULT_DPI}")
                    st.write(f"- –¶–≤–µ—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å: CMYK")
                    st.write(f"- –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {orientation}")
                    st.write(f"- –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {placement}")
                    st.write(f"- –¶–≤–µ—Ç –ø–æ–ª–µ–π: {border_color}")
                    
                with col_info2:
                    st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:**")
                    st.write(f"- –ö–æ—ç—Ñ—Ñ. –º–∞—Å—à—Ç–∞–±–∞ X: {res.get('scaleX', 0):.3f}")
                    st.write(f"- –ö–æ—ç—Ñ—Ñ. –º–∞—Å—à—Ç–∞–±–∞ Y: {res.get('scaleY', 0):.3f}")
                    st.write(f"- –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: {out_format}")
                    if out_format.upper() == "JPEG":
                        st.write(f"- –ö–∞—á–µ—Å—Ç–≤–æ JPEG: {DEFAULT_JPEG_QUALITY}%")
                    else:
                        st.write("- –°–∂–∞—Ç–∏–µ TIFF: LZW")
                    
            st.success(f"‚úÖ {fname} ‚Üí {Path(res['outPath']).name}")
        else:
            st.error(f"{fname}: {res['reason']}")

        reportRows.append(
            [
                fname,
                res["status"],
                res.get("reason", ""),
                res.get("scaleX", 0),
                res.get("scaleY", 0),
                res.get("outPath", ""),
            ]
        )
        progress.progress(i / total)

    if st.session_state.processed_images:
        st.subheader("üíæ –°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        
        col_metric1, col_metric2, col_metric3 = st.columns(3)
        with col_metric1:
            st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤", len(st.session_state.processed_images))
        with col_metric2:
            st.metric("–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞", out_format)
        with col_metric3:
            st.metric("DPI", f"{DEFAULT_DPI}")
        
        st.markdown("---")
        
        for outPath, fname in st.session_state.processed_images:
            st.download_button(
                f"üíæ –°–∫–∞—á–∞—Ç—å {fname}",
                data=open(outPath, "rb"),
                file_name=Path(outPath).name,
                mime="image/tiff" if out_format == "TIFF" else "image/jpeg",
            )

    reportPath = out_dir / "report.csv"
    with open(reportPath, "w", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        w.writerow(["source", "status", "details", "scaleX", "scaleY", "outPath"])
        w.writerows(reportRows)

    st.markdown("---")
    st.subheader("üìà –û—Ç—á—ë—Ç –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    st.download_button(
        "üìà –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç CSV",
        data=open(reportPath, "rb"),
        file_name="report.csv",
        mime="text/csv",
    )
