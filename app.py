import streamlit as st
from pathlib import Path
from PIL import Image
import csv
import uuid
import shutil
from process import (
    processImageFile,
    DEFAULT_DPI,
    DEFAULT_THRESHOLD,
    DEFAULT_OUTPUT_FROMAT,
    DEFAULT_JPEG_QUALITY,
)

st.set_page_config(page_title="A4 Print Prep", layout="wide")
st.title("A4 Print Prep")

# -----------------------------
# –ü–∞–ø–∫–∞ –≤—ã–≤–æ–¥–∞
out_dir = Path("output")
out_dir.mkdir(exist_ok=True)

# -----------------------------
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–µ–≤—å—é –≤ —Å–µ—Å—Å–∏–∏
if "preview_images" not in st.session_state:
    st.session_state.preview_images = []  # —Å–ø–∏—Å–æ–∫ (tmp_path, –∏–º—è —Ñ–∞–π–ª–∞)
if "processed_images" not in st.session_state:
    st.session_state.processed_images = []  # —Å–ø–∏—Å–æ–∫ (outPath, –∏–º—è —Ñ–∞–π–ª–∞)

# -----------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
uploaded_files = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    type=["jpg", "jpeg", "png", "tif", "tiff", "bmp"],
    accept_multiple_files=True,
)

if uploaded_files:
    # –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–≤—å—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    for p, _ in st.session_state.preview_images:
        if p.exists():
            p.unlink()
    st.session_state.preview_images = []
    st.session_state.processed_images = []

    for f in uploaded_files:
        tmp_path = out_dir / f"{uuid.uuid4()}_{f.name}"
        with open(tmp_path, "wb") as buf:
            buf.write(f.read())
        st.session_state.preview_images.append((tmp_path, f.name))

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
col1, col2, col3 = st.columns(3)
with col1:
    orientation = st.selectbox("–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è", ["portrait", "landscape", "reverse"])
with col2:
    placement = st.selectbox("–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ", ["center", "top", "bottom", "left", "right"])
with col3:
    out_format = st.selectbox("–§–æ—Ä–º–∞—Ç", ["TIFF", "JPEG"])

threshold = st.slider("–ü–æ—Ä–æ–≥ –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∏", 1.0, 10.0, DEFAULT_THRESHOLD, 0.1)
border_color = st.color_picker("–¶–≤–µ—Ç –ø–æ–ª–µ–π", "#FFFFFF")
borderRGB = tuple(int(border_color.lstrip("#")[i : i + 2], 16) for i in (0, 2, 4))

# -----------------------------
# –ü—Ä–µ–≤—å—é –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (—É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ)
if st.session_state.preview_images:
    st.subheader("–ü—Ä–µ–≤—å—é –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    for tmp_path, fname in st.session_state.preview_images:
        try:
            im = Image.open(tmp_path)
            im.thumbnail((200, 200))  # —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é
            st.image(im, caption=fname, use_column_width=False)
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é {fname}: {e}")

# -----------------------------
# –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É") and st.session_state.preview_images:
    reportRows = []
    progress = st.progress(0)
    total = len(st.session_state.preview_images)

    st.session_state.processed_images = []  # –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ

    for i, (tmp_path, fname) in enumerate(st.session_state.preview_images, start=1):
        res = processImageFile(
            tmp_path,
            out_dir,
            dpi=DEFAULT_DPI,
            threshold=threshold,
            placement=placement,
            borderRGB=borderRGB,
            outFormat=out_format,
            jpegQuality=DEFAULT_JPEG_QUALITY,
            orientation=orientation,
        )

        # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –î–æ/–ü–æ—Å–ª–µ
        col_a, col_b = st.columns(2)
        with col_a:
            try:
                im_before = Image.open(tmp_path)
                im_before.thumbnail((250, 250))
                st.image(im_before, caption=f"–î–æ: {fname}", use_column_width=False)
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ {fname}: {e}")

        if res["status"] == "converted":
            with col_b:
                try:
                    im_after = Image.open(res["outPath"])
                    im_after.thumbnail((400, 400))  # –±–æ–ª—å—à–µ–µ –ø—Ä–µ–≤—å—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    st.image(im_after, caption="–ü–æ—Å–ª–µ", use_column_width=False)
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ {fname}: {e}")

            st.session_state.processed_images.append((res["outPath"], fname))
            st.success(f"{fname} ‚Üí {Path(res['outPath']).name}")
        else:
            st.error(f"{fname}: {res['reason']}")

        reportRows.append(
            [
                fname,
                res["status"],
                res.get("reason", ""),
                res.get("scaleX", 0),
                res.get("scaleY", 0),
                res.get("outPath", ""),
            ]
        )
        progress.progress(i / total)

    # -----------------------------
    # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for outPath, fname in st.session_state.processed_images:
        st.download_button(
            f"–°–∫–∞—á–∞—Ç—å {fname}",
            data=open(outPath, "rb"),
            file_name=Path(outPath).name,
            mime="image/tiff" if out_format == "TIFF" else "image/jpeg",
        )

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ CSV
    reportPath = out_dir / "report.csv"
    with open(reportPath, "w", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        w.writerow(["source", "status", "details", "scaleX", "scaleY", "outPath"])
        w.writerows(reportRows)

    st.download_button(
        "–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç CSV",
        data=open(reportPath, "rb"),
        file_name="report.csv",
        mime="text/csv",
    )